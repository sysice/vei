// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: VEIv1_0.proto

package VEIv1_0

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VEIv1_0Client is the client API for VEIv1_0 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VEIv1_0Client interface {
	PublishImage(ctx context.Context, opts ...grpc.CallOption) (VEIv1_0_PublishImageClient, error)
	SubscribeImage(ctx context.Context, in *SubImageParams, opts ...grpc.CallOption) (VEIv1_0_SubscribeImageClient, error)
	DeleteCamera(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*ErrorResponse, error)
	PublishVisionOutput(ctx context.Context, opts ...grpc.CallOption) (VEIv1_0_PublishVisionOutputClient, error)
	SubscribeVisionOutput(ctx context.Context, in *SubVisionParams, opts ...grpc.CallOption) (VEIv1_0_SubscribeVisionOutputClient, error)
	PublishToCloud(ctx context.Context, opts ...grpc.CallOption) (VEIv1_0_PublishToCloudClient, error)
	ListCameras(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Cameras, error)
	ListApplications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Applications, error)
	ListClouds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Clouds, error)
}

type vEIv1_0Client struct {
	cc grpc.ClientConnInterface
}

func NewVEIv1_0Client(cc grpc.ClientConnInterface) VEIv1_0Client {
	return &vEIv1_0Client{cc}
}

func (c *vEIv1_0Client) PublishImage(ctx context.Context, opts ...grpc.CallOption) (VEIv1_0_PublishImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &VEIv1_0_ServiceDesc.Streams[0], "/VEIv1_0.VEIv1_0/PublishImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &vEIv1_0PublishImageClient{stream}
	return x, nil
}

type VEIv1_0_PublishImageClient interface {
	Send(*PubImageParams) error
	CloseAndRecv() (*ErrorResponse, error)
	grpc.ClientStream
}

type vEIv1_0PublishImageClient struct {
	grpc.ClientStream
}

func (x *vEIv1_0PublishImageClient) Send(m *PubImageParams) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vEIv1_0PublishImageClient) CloseAndRecv() (*ErrorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ErrorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vEIv1_0Client) SubscribeImage(ctx context.Context, in *SubImageParams, opts ...grpc.CallOption) (VEIv1_0_SubscribeImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &VEIv1_0_ServiceDesc.Streams[1], "/VEIv1_0.VEIv1_0/SubscribeImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &vEIv1_0SubscribeImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VEIv1_0_SubscribeImageClient interface {
	Recv() (*ImageData, error)
	grpc.ClientStream
}

type vEIv1_0SubscribeImageClient struct {
	grpc.ClientStream
}

func (x *vEIv1_0SubscribeImageClient) Recv() (*ImageData, error) {
	m := new(ImageData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vEIv1_0Client) DeleteCamera(ctx context.Context, in *CameraID, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/VEIv1_0.VEIv1_0/DeleteCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vEIv1_0Client) PublishVisionOutput(ctx context.Context, opts ...grpc.CallOption) (VEIv1_0_PublishVisionOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &VEIv1_0_ServiceDesc.Streams[2], "/VEIv1_0.VEIv1_0/PublishVisionOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &vEIv1_0PublishVisionOutputClient{stream}
	return x, nil
}

type VEIv1_0_PublishVisionOutputClient interface {
	Send(*PubVisionParams) error
	CloseAndRecv() (*ErrorResponse, error)
	grpc.ClientStream
}

type vEIv1_0PublishVisionOutputClient struct {
	grpc.ClientStream
}

func (x *vEIv1_0PublishVisionOutputClient) Send(m *PubVisionParams) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vEIv1_0PublishVisionOutputClient) CloseAndRecv() (*ErrorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ErrorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vEIv1_0Client) SubscribeVisionOutput(ctx context.Context, in *SubVisionParams, opts ...grpc.CallOption) (VEIv1_0_SubscribeVisionOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &VEIv1_0_ServiceDesc.Streams[3], "/VEIv1_0.VEIv1_0/SubscribeVisionOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &vEIv1_0SubscribeVisionOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VEIv1_0_SubscribeVisionOutputClient interface {
	Recv() (*VisionOutput, error)
	grpc.ClientStream
}

type vEIv1_0SubscribeVisionOutputClient struct {
	grpc.ClientStream
}

func (x *vEIv1_0SubscribeVisionOutputClient) Recv() (*VisionOutput, error) {
	m := new(VisionOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vEIv1_0Client) PublishToCloud(ctx context.Context, opts ...grpc.CallOption) (VEIv1_0_PublishToCloudClient, error) {
	stream, err := c.cc.NewStream(ctx, &VEIv1_0_ServiceDesc.Streams[4], "/VEIv1_0.VEIv1_0/PublishToCloud", opts...)
	if err != nil {
		return nil, err
	}
	x := &vEIv1_0PublishToCloudClient{stream}
	return x, nil
}

type VEIv1_0_PublishToCloudClient interface {
	Send(*PubCloudParams) error
	CloseAndRecv() (*ErrorResponse, error)
	grpc.ClientStream
}

type vEIv1_0PublishToCloudClient struct {
	grpc.ClientStream
}

func (x *vEIv1_0PublishToCloudClient) Send(m *PubCloudParams) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vEIv1_0PublishToCloudClient) CloseAndRecv() (*ErrorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ErrorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vEIv1_0Client) ListCameras(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Cameras, error) {
	out := new(Cameras)
	err := c.cc.Invoke(ctx, "/VEIv1_0.VEIv1_0/ListCameras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vEIv1_0Client) ListApplications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Applications, error) {
	out := new(Applications)
	err := c.cc.Invoke(ctx, "/VEIv1_0.VEIv1_0/ListApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vEIv1_0Client) ListClouds(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Clouds, error) {
	out := new(Clouds)
	err := c.cc.Invoke(ctx, "/VEIv1_0.VEIv1_0/ListClouds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VEIv1_0Server is the server API for VEIv1_0 service.
// All implementations must embed UnimplementedVEIv1_0Server
// for forward compatibility
type VEIv1_0Server interface {
	PublishImage(VEIv1_0_PublishImageServer) error
	SubscribeImage(*SubImageParams, VEIv1_0_SubscribeImageServer) error
	DeleteCamera(context.Context, *CameraID) (*ErrorResponse, error)
	PublishVisionOutput(VEIv1_0_PublishVisionOutputServer) error
	SubscribeVisionOutput(*SubVisionParams, VEIv1_0_SubscribeVisionOutputServer) error
	PublishToCloud(VEIv1_0_PublishToCloudServer) error
	ListCameras(context.Context, *empty.Empty) (*Cameras, error)
	ListApplications(context.Context, *empty.Empty) (*Applications, error)
	ListClouds(context.Context, *empty.Empty) (*Clouds, error)
	mustEmbedUnimplementedVEIv1_0Server()
}

// UnimplementedVEIv1_0Server must be embedded to have forward compatible implementations.
type UnimplementedVEIv1_0Server struct {
}

func (UnimplementedVEIv1_0Server) PublishImage(VEIv1_0_PublishImageServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishImage not implemented")
}
func (UnimplementedVEIv1_0Server) SubscribeImage(*SubImageParams, VEIv1_0_SubscribeImageServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeImage not implemented")
}
func (UnimplementedVEIv1_0Server) DeleteCamera(context.Context, *CameraID) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCamera not implemented")
}
func (UnimplementedVEIv1_0Server) PublishVisionOutput(VEIv1_0_PublishVisionOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishVisionOutput not implemented")
}
func (UnimplementedVEIv1_0Server) SubscribeVisionOutput(*SubVisionParams, VEIv1_0_SubscribeVisionOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeVisionOutput not implemented")
}
func (UnimplementedVEIv1_0Server) PublishToCloud(VEIv1_0_PublishToCloudServer) error {
	return status.Errorf(codes.Unimplemented, "method PublishToCloud not implemented")
}
func (UnimplementedVEIv1_0Server) ListCameras(context.Context, *empty.Empty) (*Cameras, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCameras not implemented")
}
func (UnimplementedVEIv1_0Server) ListApplications(context.Context, *empty.Empty) (*Applications, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedVEIv1_0Server) ListClouds(context.Context, *empty.Empty) (*Clouds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClouds not implemented")
}
func (UnimplementedVEIv1_0Server) mustEmbedUnimplementedVEIv1_0Server() {}

// UnsafeVEIv1_0Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VEIv1_0Server will
// result in compilation errors.
type UnsafeVEIv1_0Server interface {
	mustEmbedUnimplementedVEIv1_0Server()
}

func RegisterVEIv1_0Server(s grpc.ServiceRegistrar, srv VEIv1_0Server) {
	s.RegisterService(&VEIv1_0_ServiceDesc, srv)
}

func _VEIv1_0_PublishImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VEIv1_0Server).PublishImage(&vEIv1_0PublishImageServer{stream})
}

type VEIv1_0_PublishImageServer interface {
	SendAndClose(*ErrorResponse) error
	Recv() (*PubImageParams, error)
	grpc.ServerStream
}

type vEIv1_0PublishImageServer struct {
	grpc.ServerStream
}

func (x *vEIv1_0PublishImageServer) SendAndClose(m *ErrorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vEIv1_0PublishImageServer) Recv() (*PubImageParams, error) {
	m := new(PubImageParams)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VEIv1_0_SubscribeImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubImageParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VEIv1_0Server).SubscribeImage(m, &vEIv1_0SubscribeImageServer{stream})
}

type VEIv1_0_SubscribeImageServer interface {
	Send(*ImageData) error
	grpc.ServerStream
}

type vEIv1_0SubscribeImageServer struct {
	grpc.ServerStream
}

func (x *vEIv1_0SubscribeImageServer) Send(m *ImageData) error {
	return x.ServerStream.SendMsg(m)
}

func _VEIv1_0_DeleteCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CameraID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VEIv1_0Server).DeleteCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VEIv1_0.VEIv1_0/DeleteCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VEIv1_0Server).DeleteCamera(ctx, req.(*CameraID))
	}
	return interceptor(ctx, in, info, handler)
}

func _VEIv1_0_PublishVisionOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VEIv1_0Server).PublishVisionOutput(&vEIv1_0PublishVisionOutputServer{stream})
}

type VEIv1_0_PublishVisionOutputServer interface {
	SendAndClose(*ErrorResponse) error
	Recv() (*PubVisionParams, error)
	grpc.ServerStream
}

type vEIv1_0PublishVisionOutputServer struct {
	grpc.ServerStream
}

func (x *vEIv1_0PublishVisionOutputServer) SendAndClose(m *ErrorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vEIv1_0PublishVisionOutputServer) Recv() (*PubVisionParams, error) {
	m := new(PubVisionParams)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VEIv1_0_SubscribeVisionOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubVisionParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VEIv1_0Server).SubscribeVisionOutput(m, &vEIv1_0SubscribeVisionOutputServer{stream})
}

type VEIv1_0_SubscribeVisionOutputServer interface {
	Send(*VisionOutput) error
	grpc.ServerStream
}

type vEIv1_0SubscribeVisionOutputServer struct {
	grpc.ServerStream
}

func (x *vEIv1_0SubscribeVisionOutputServer) Send(m *VisionOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _VEIv1_0_PublishToCloud_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VEIv1_0Server).PublishToCloud(&vEIv1_0PublishToCloudServer{stream})
}

type VEIv1_0_PublishToCloudServer interface {
	SendAndClose(*ErrorResponse) error
	Recv() (*PubCloudParams, error)
	grpc.ServerStream
}

type vEIv1_0PublishToCloudServer struct {
	grpc.ServerStream
}

func (x *vEIv1_0PublishToCloudServer) SendAndClose(m *ErrorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vEIv1_0PublishToCloudServer) Recv() (*PubCloudParams, error) {
	m := new(PubCloudParams)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VEIv1_0_ListCameras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VEIv1_0Server).ListCameras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VEIv1_0.VEIv1_0/ListCameras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VEIv1_0Server).ListCameras(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VEIv1_0_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VEIv1_0Server).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VEIv1_0.VEIv1_0/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VEIv1_0Server).ListApplications(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VEIv1_0_ListClouds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VEIv1_0Server).ListClouds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VEIv1_0.VEIv1_0/ListClouds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VEIv1_0Server).ListClouds(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VEIv1_0_ServiceDesc is the grpc.ServiceDesc for VEIv1_0 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VEIv1_0_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VEIv1_0.VEIv1_0",
	HandlerType: (*VEIv1_0Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteCamera",
			Handler:    _VEIv1_0_DeleteCamera_Handler,
		},
		{
			MethodName: "ListCameras",
			Handler:    _VEIv1_0_ListCameras_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _VEIv1_0_ListApplications_Handler,
		},
		{
			MethodName: "ListClouds",
			Handler:    _VEIv1_0_ListClouds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublishImage",
			Handler:       _VEIv1_0_PublishImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeImage",
			Handler:       _VEIv1_0_SubscribeImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublishVisionOutput",
			Handler:       _VEIv1_0_PublishVisionOutput_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeVisionOutput",
			Handler:       _VEIv1_0_SubscribeVisionOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublishToCloud",
			Handler:       _VEIv1_0_PublishToCloud_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "VEIv1_0.proto",
}
